import SwiftUI
import AVFoundation
import Speech

@main
struct SpaceMathTrainerApp: App {
    
    init() {
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è iPhone –∑–≤—É–∫–æ–≤ –∏ —Ä–µ—á–∏
        setupAppForiPhone()
    }
    
    var body: some Scene {
        WindowGroup {
            ContentView()
                .preferredColorScheme(.dark) // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
                .statusBarHidden() // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è
                .onAppear {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    requestPermissions()
                }
        }
    }
    
    // MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è iPhone
    private func setupAppForiPhone() {
        print("üöÄ SpaceMathTrainerApp: Initializing for iPhone...")
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–≤—É–∫–æ–≤ –∏ —Ä–µ—á–∏
        configureAudioSession()
        
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        prepareHapticFeedback()
        
        print("‚úÖ SpaceMathTrainerApp: iPhone setup completed")
    }
    
    // MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ —Å–µ—Å—Å–∏–∏
    private func configureAudioSession() {
        do {
            let audioSession = AVAudioSession.sharedInstance()
            
            // –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–æ–≤ –ò –∑–∞–ø–∏—Å–∏ —Ä–µ—á–∏
            try audioSession.setCategory(.playAndRecord,
                                       mode: .default,
                                       options: [.defaultToSpeaker, .allowBluetooth, .mixWithOthers])
            
            try audioSession.setActive(true, options: .notifyOthersOnDeactivation)
            print("‚úÖ Audio session configured successfully")
            
        } catch {
            print("‚ùå Failed to configure audio session: \(error)")
            
            // FALLBACK: –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            do {
                let audioSession = AVAudioSession.sharedInstance()
                try audioSession.setCategory(.playback)
                try audioSession.setActive(true)
                print("‚ö†Ô∏è Using fallback audio session configuration")
            } catch {
                print("‚ùå Even fallback audio session failed: \(error)")
            }
        }
    }
    
    // MARK: - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    private func prepareHapticFeedback() {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
        let impactLight = UIImpactFeedbackGenerator(style: .light)
        let impactMedium = UIImpactFeedbackGenerator(style: .medium)
        let impactHeavy = UIImpactFeedbackGenerator(style: .heavy)
        let notificationFeedback = UINotificationFeedbackGenerator()
        
        impactLight.prepare()
        impactMedium.prepare()
        impactHeavy.prepare()
        notificationFeedback.prepare()
        
        print("‚úÖ Haptic feedback generators prepared")
    }
    
    // MARK: - –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    private func requestPermissions() {
        print("üîê Requesting necessary permissions...")
        
        // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        requestMicrophonePermission()
        
        // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
        requestSpeechRecognitionPermission()
    }
    
    private func requestMicrophonePermission() {
        AVAudioSession.sharedInstance().requestRecordPermission { granted in
            DispatchQueue.main.async {
                if granted {
                    print("‚úÖ Microphone permission granted")
                } else {
                    print("‚ùå Microphone permission denied")
                    // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                }
            }
        }
    }
    
    private func requestSpeechRecognitionPermission() {
        SFSpeechRecognizer.requestAuthorization { status in
            DispatchQueue.main.async {
                switch status {
                case .authorized:
                    print("‚úÖ Speech recognition permission granted")
                case .denied:
                    print("‚ùå Speech recognition permission denied")
                case .restricted:
                    print("‚ö†Ô∏è Speech recognition restricted")
                case .notDetermined:
                    print("‚è≥ Speech recognition permission not determined")
                @unknown default:
                    print("‚ùì Unknown speech recognition permission status")
                }
            }
        }
    }
}
