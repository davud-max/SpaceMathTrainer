import Foundation
import SwiftUI
import Speech
import AVFoundation
import AudioToolbox

@MainActor
class SpeechManager: NSObject, ObservableObject, AVSpeechSynthesizerDelegate {
    
    @Published var isListening = false
    @Published var lastRecognizedText = ""
    @Published var microphoneActive = false
    @Published var listeningForAnswers = false
    @Published var currentLanguage = "ru-RU"
    
    weak var gameManager: MathGameManager?
    
    private let audioEngine = AVAudioEngine()
    private var speechRecognizer: SFSpeechRecognizer?
    private var recognitionRequest: SFSpeechAudioBufferRecognitionRequest?
    private var recognitionTask: SFSpeechRecognitionTask?
    private let audioSession = AVAudioSession.sharedInstance()
    
    private var currentVoice: AVSpeechSynthesisVoice?
    private let synthesizer = AVSpeechSynthesizer()
    
    private var currentQuestionId: String?
    private var answerTimeout: Timer?
    private var delayedProcessingTimer: Timer?
    private var lastPartialResult: String = ""
    
    // –§–ª–∞–≥–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AudioEngine
    private var audioEngineSetupCompleted = false
    private var audioEngineStarted = false
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    private var listeningInProgress = false
    private var speechInProgress = false
    private var recognitionInProgress = false
    
    // =====================================================
    // –ü–û–õ–ù–û–¶–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–í–£–ö–û–í –° AVAPLAYER
    // =====================================================
    
    private var correctSoundPlayer: AVAudioPlayer?
    private var incorrectSoundPlayer: AVAudioPlayer?
    private var timeoutSoundPlayer: AVAudioPlayer?
    
    override init() {
        super.init()
        
        speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: "ru-RU"))
        synthesizer.delegate = self
        
        requestSpeechAuthorization()
        setupAudioEngine()
        setupAdvancedSounds() // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤
        
        // –ù–∞–π—Ç–∏ –≥–æ–ª–æ—Å Milena –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        let voices = AVSpeechSynthesisVoice.speechVoices()
        if let milenaVoice = voices.first(where: { $0.name.contains("Milena") && $0.language == "ru-RU" }) {
            currentVoice = milenaVoice
            print("‚úÖ Found Milena voice: \(milenaVoice.name)")
        } else if let russianVoice = AVSpeechSynthesisVoice(language: "ru-RU") {
            currentVoice = russianVoice
            print("‚úÖ Using default Russian voice: \(russianVoice.name)")
        }
        
        print("‚úÖ SpeechManager initialized with ADVANCED sound system")
    }
    
    // =====================================================
    // –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–í–£–ö–û–í (–†–ê–ë–û–¢–ê–ï–¢ –í –õ–Æ–ë–´–• –£–°–õ–û–í–ò–Ø–•)
    // =====================================================
    
    private func setupAdvancedSounds() {
        print("üîß Setting up ADVANCED sound system with AVAudioPlayer...")
        
        // –°–æ–∑–¥–∞–µ–º –∑–≤—É–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å—Ç–æ—Ç–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–∑–ª–∏—á–∏–º–æ—Å—Ç–∏
        correctSoundPlayer = createBeepPlayer(frequency: 880, duration: 0.4)     // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏—è—Ç–Ω—ã–π —Ç–æ–Ω
        incorrectSoundPlayer = createBeepPlayer(frequency: 220, duration: 0.6)   // –ù–∏–∑–∫–∏–π —Ç–æ–Ω
        timeoutSoundPlayer = createBeepPlayer(frequency: 440, duration: 0.3)     // –°—Ä–µ–¥–Ω–∏–π —Ç–æ–Ω
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        correctSoundPlayer?.prepareToPlay()
        incorrectSoundPlayer?.prepareToPlay()
        timeoutSoundPlayer?.prepareToPlay()
        
        print("‚úÖ ADVANCED sound system created with AVAudioPlayer")
    }
    
    private func createBeepPlayer(frequency: Double, duration: Double) -> AVAudioPlayer? {
        let sampleRate = 44100.0
        let samples = Int(sampleRate * duration)
        
        var audioData = [Float]()
        
        for i in 0..<samples {
            let time = Double(i) / sampleRate
            
            // –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—É—Å–æ–∏–¥—É —Å –ø–ª–∞–≤–Ω—ã–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º
            let fadeOutStart = samples - Int(sampleRate * 0.1) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 0.1 —Å–µ–∫—É–Ω–¥—ã
            let fadeOut = i > fadeOutStart ? Double(samples - i) / Double(samples - fadeOutStart) : 1.0
            
            let amplitude = sin(2.0 * Double.pi * frequency * time) * fadeOut * 0.3 // 30% –≥—Ä–æ–º–∫–æ—Å—Ç–∏
            audioData.append(Float(amplitude))
        }
        
        // –°–æ–∑–¥–∞–µ–º AVAudioPCMBuffer
        guard let audioFormat = AVAudioFormat(commonFormat: .pcmFormatFloat32,
                                            sampleRate: sampleRate,
                                            channels: 1,
                                            interleaved: false) else {
            print("‚ùå Failed to create audio format")
            return nil
        }
        
        guard let buffer = AVAudioPCMBuffer(pcmFormat: audioFormat, frameCapacity: AVAudioFrameCount(samples)) else {
            print("‚ùå Failed to create audio buffer")
            return nil
        }
        
        buffer.frameLength = AVAudioFrameCount(samples)
        
        guard let channelData = buffer.floatChannelData?[0] else {
            print("‚ùå Failed to get channel data")
            return nil
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
        for i in 0..<samples {
            channelData[i] = audioData[i]
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –≤ Data –¥–ª—è AVAudioPlayer
        do {
            let audioFile = try createTempAudioFile(from: buffer, format: audioFormat)
            let player = try AVAudioPlayer(contentsOf: audioFile)
            player.volume = 1.0
            return player
        } catch {
            print("‚ùå Failed to create audio player: \(error)")
            return nil
        }
    }
    
    private func createTempAudioFile(from buffer: AVAudioPCMBuffer, format: AVAudioFormat) throws -> URL {
        let tempDir = FileManager.default.temporaryDirectory
        let audioFile = tempDir.appendingPathComponent("beep_\(UUID().uuidString).wav")
        
        let file = try AVAudioFile(forWriting: audioFile, settings: format.settings)
        try file.write(from: buffer)
        
        return audioFile
    }

    func playCorrectSound() {
        print("üîä Playing ADVANCED correct sound with AVAudioPlayer")
        
        Task {
            await playAdvancedSound(player: correctSoundPlayer, soundName: "correct")
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            let impactFeedback = UIImpactFeedbackGenerator(style: .light)
            impactFeedback.prepare()
            impactFeedback.impactOccurred()
        }
    }

    func playIncorrectSound() {
        print("üîä Playing ADVANCED incorrect sound with AVAudioPlayer")
        
        Task {
            await playAdvancedSound(player: incorrectSoundPlayer, soundName: "incorrect")
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)
            impactFeedback.prepare()
            impactFeedback.impactOccurred()
        }
    }

    func playTimeoutSound() {
        print("üîä Playing ADVANCED timeout sound with AVAudioPlayer")
        
        Task {
            await playAdvancedSound(player: timeoutSoundPlayer, soundName: "timeout")
            
            // –°–µ—Ä–∏—è –≤–∏–±—Ä–∞—Ü–∏–π –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
            let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
            impactFeedback.prepare()
            impactFeedback.impactOccurred()
            
            try? await Task.sleep(nanoseconds: 200_000_000)
            impactFeedback.impactOccurred()
        }
    }
    
    private func playAdvancedSound(player: AVAudioPlayer?, soundName: String) async {
        guard let player = player else {
            print("‚ùå No AVAudioPlayer for \(soundName) sound")
            
            // Fallback –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º –∑–≤—É–∫–∞–º
            switch soundName {
            case "correct":
                AudioServicesPlaySystemSound(1016)
            case "incorrect":
                AudioServicesPlaySystemSound(1002)
            case "timeout":
                AudioServicesPlaySystemSound(1005)
            default:
                break
            }
            return
        }
        
        print("üéµ Playing \(soundName) sound with AVAudioPlayer (volume: \(player.volume))")
        
        do {
            // –ù–ï –º–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞—É–¥–∏–æ—Å–µ—Å—Å–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
            player.stop() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
            player.currentTime = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            
            if player.play() {
                print("‚úÖ \(soundName.capitalized) sound started playing")
                
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤—É–∫–∞
                while player.isPlaying {
                    try await Task.sleep(nanoseconds: 50_000_000) // 0.05 —Å–µ–∫—É–Ω–¥—ã
                }
                
                print("‚úÖ \(soundName.capitalized) sound finished")
            } else {
                print("‚ùå Failed to start \(soundName) sound")
                
                // Fallback –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º –∑–≤—É–∫–∞–º
                switch soundName {
                case "correct":
                    AudioServicesPlaySystemSound(1016)
                case "incorrect":
                    AudioServicesPlaySystemSound(1002)
                case "timeout":
                    AudioServicesPlaySystemSound(1005)
                default:
                    break
                }
            }
            
        } catch {
            print("‚ùå Error during \(soundName) sound playback: \(error)")
        }
    }
    
    func testReliableSounds() {
        print("üîä ==========================================")
        print("üîä TESTING ADVANCED SOUND SYSTEM")
        print("üîä ==========================================")
        
        Task {
            print("üîä Testing correct sound...")
            playCorrectSound()
            
            try await Task.sleep(nanoseconds: 3_000_000_000) // 3 —Å–µ–∫—É–Ω–¥—ã
            
            print("üîä Testing incorrect sound...")
            playIncorrectSound()
            
            try await Task.sleep(nanoseconds: 3_000_000_000) // 3 —Å–µ–∫—É–Ω–¥—ã
            
            print("üîä Testing timeout sound...")
            playTimeoutSound()
            
            try await Task.sleep(nanoseconds: 3_000_000_000) // 3 —Å–µ–∫—É–Ω–¥—ã
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏
            print("üîä Testing fallback system sounds...")
            AudioServicesPlaySystemSound(1016)
            
            try await Task.sleep(nanoseconds: 1_500_000_000)
            
            AudioServicesPlaySystemSound(1002)
            
            try await Task.sleep(nanoseconds: 1_500_000_000)
            
            AudioServicesPlaySystemSound(1005)
            
            print("üîä ==========================================")
            print("üîä ADVANCED SOUND TEST COMPLETED!")
            print("üîä –ï—Å–ª–∏ –≤—Å—ë –µ—â–µ –Ω–µ—Ç –∑–≤—É–∫–æ–≤:")
            print("üîä 1. üì± –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –±–µ–∑–∑–≤—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –í–´–ö–õ–Æ–ß–ï–ù")
            print("üîä 2. üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –º–µ–¥–∏–∞ 75%+ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)")
            print("üîä 3. üéß –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏!")
            print("üîä 4. üì¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –ó–≤—É–∫–∏ > –ó–≤—É–∫–∏ –∫–Ω–æ–ø–æ–∫ –í–ö–õ")
            print("üîä 5. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ iPhone –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç")
            print("üîä ==========================================")
        }
    }
    
    func checkSoundStatus() -> Bool {
        print("üîç ADVANCED Sound status check:")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AVAudioPlayer'–æ–≤
        let correctPlayerReady = correctSoundPlayer?.prepareToPlay() ?? false
        let incorrectPlayerReady = incorrectSoundPlayer?.prepareToPlay() ?? false
        let timeoutPlayerReady = timeoutSoundPlayer?.prepareToPlay() ?? false
        
        print("üéµ Correct AVAudioPlayer ready: \(correctPlayerReady)")
        print("üéµ Incorrect AVAudioPlayer ready: \(incorrectPlayerReady)")
        print("üéµ Timeout AVAudioPlayer ready: \(timeoutPlayerReady)")
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É–¥–∏–æ –º–∞—Ä—à—Ä—É—Ç–µ
        let currentRoute = audioSession.currentRoute
        print("üì± Current audio route:")
        for output in currentRoute.outputs {
            print("   - \(output.portName) (\(output.portType.rawValue))")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–≤—É–∫–æ–≤
        let outputAvailable = !currentRoute.outputs.isEmpty
        print("üîä Audio output available: \(outputAvailable)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞—É–¥–∏–æ—Å–µ—Å—Å–∏–∏
        print("üéµ Audio session category: \(audioSession.category.rawValue)")
        print("üéµ Audio session mode: \(audioSession.mode.rawValue)")
        print("üîä Audio session volume: \(audioSession.outputVolume)")
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ì–†–û–ú–ö–û–°–¢–ò
        let volume = audioSession.outputVolume
        if volume < 0.5 {
            print("üö® –ü–†–û–ë–õ–ï–ú–ê: –ì—Ä–æ–º–∫–æ—Å—Ç—å –º–µ–¥–∏–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è (\(Int(volume * 100))%)")
            print("üîß –†–ï–®–ï–ù–ò–ï: –£–≤–µ–ª–∏—á—å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏ ‚¨ÜÔ∏è –¥–æ 75%+")
        } else {
            print("‚úÖ –ì—Ä–æ–º–∫–æ—Å—Ç—å –º–µ–¥–∏–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è (\(Int(volume * 100))%)")
        }
        
        print("‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –¥–ª—è iPhone:")
        print("1. üì± –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –±–µ–∑–∑–≤—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ = –í–´–ö–õ–Æ–ß–ï–ù")
        print("2. üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –ú–ï–î–ò–ê (–∫–Ω–æ–ø–∫–∏ ‚¨ÜÔ∏è‚¨áÔ∏è) = 75%+")
        print("3. üì¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –ó–≤—É–∫–∏ > –ó–≤—É–∫–∏ –∫–Ω–æ–ø–æ–∫ = –í–ö–õ")
        print("4. üéß –ï—Å–ª–∏ –Ω–µ —Å–ª—ã—à–Ω–æ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏!")
        
        let playersReady = correctPlayerReady || incorrectPlayerReady || timeoutPlayerReady
        return outputAvailable && volume >= 0.3 && playersReady
    }
    
    // =====================================================
    // –ê–£–î–ò–û ENGINE - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
    // =====================================================
    
    private func setupAudioEngine() {
        do {
            // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –û–î–ò–ù –†–ê–ó –∏ –ù–ï –ú–ï–ù–Ø–ï–ú
            try audioSession.setCategory(.playAndRecord, mode: .default, options: [
                .defaultToSpeaker,
                .allowBluetooth,
                .mixWithOthers
            ])
            try audioSession.setActive(true, options: .notifyOthersOnDeactivation)
            
            let inputNode = audioEngine.inputNode
            let outputNode = audioEngine.outputNode
            
            print("‚úÖ AudioEngine setup completed (ADVANCED)")
            print("üìù InputNode: \(inputNode)")
            print("üìù OutputNode: \(outputNode)")
            
            audioEngineSetupCompleted = true
            
        } catch {
            print("‚ùå Failed to setup AudioEngine: \(error)")
            audioEngineSetupCompleted = false
        }
    }
    
    private func safelyStartAudioEngine() {
        guard audioEngineSetupCompleted else {
            print("‚ùå AudioEngine not properly setup")
            return
        }
        
        if audioEngine.isRunning {
            print("‚ñ∂Ô∏è AudioEngine already running")
            audioEngineStarted = true
            return
        }
        
        do {
            try audioEngine.start()
            audioEngineStarted = true
            print("‚ñ∂Ô∏è AudioEngine started safely")
        } catch {
            print("‚ùå Failed to start AudioEngine: \(error)")
            audioEngineStarted = false
        }
    }
    
    private func safelyStopAudioEngine() {
        guard audioEngine.isRunning else {
            print("üõë AudioEngine already stopped")
            return
        }
        
        let inputNode = audioEngine.inputNode
        inputNode.removeTap(onBus: 0)
        
        audioEngine.stop()
        audioEngineStarted = false
        print("üõë AudioEngine stopped safely")
    }
    
    private func cleanupRecognition() {
        print("üßπ Cleaning up recognition resources")
        
        recognitionTask?.cancel()
        recognitionTask = nil
        
        recognitionRequest?.endAudio()
        recognitionRequest = nil
        
        answerTimeout?.invalidate()
        answerTimeout = nil
        
        delayedProcessingTimer?.invalidate()
        delayedProcessingTimer = nil
        lastPartialResult = ""
        
        if audioEngine.isRunning {
            let inputNode = audioEngine.inputNode
            inputNode.removeTap(onBus: 0)
        }
        
        recognitionInProgress = false
        listeningInProgress = false
        isListening = false
        listeningForAnswers = false
        
        print("‚úÖ Recognition cleanup completed")
    }
    
    // =====================================================
    // –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
    // =====================================================
    
    func changeLanguage(to newLanguage: String) {
        toggleLanguage()
        print("üåç SpeechManager: Language changed to \(newLanguage)")
    }
    
    func setup(gameManager: MathGameManager) {
        self.gameManager = gameManager
        print("üîß SpeechManager: Setup completed with gameManager")
    }
    
    func setup(language: String) {
        print("üîß SpeechManager: Setup with language: \(language)")
        if language == "en" {
            currentLanguage = "en-US"
            speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: "en-US"))
            if let englishVoice = AVSpeechSynthesisVoice(language: "en-US") {
                currentVoice = englishVoice
            }
        } else {
            currentLanguage = "ru-RU"
            speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: "ru-RU"))
            let voices = AVSpeechSynthesisVoice.speechVoices()
            if let milenaVoice = voices.first(where: { $0.name.contains("Milena") && $0.language == "ru-RU" }) {
                currentVoice = milenaVoice
            } else if let russianVoice = AVSpeechSynthesisVoice(language: "ru-RU") {
                currentVoice = russianVoice
            }
        }
    }
    
    func speak(_ text: String) {
        let utterance = AVSpeechUtterance(string: text)
        utterance.rate = 0.5
        utterance.volume = 1.0
        utterance.voice = currentVoice
        synthesizer.speak(utterance)
        print("üó£Ô∏è SpeechManager: Speaking: \(text)")
    }
    
    func prepareForNewQuestion() {
        print("üÜï ===== PREPARING FOR NEW QUESTION =====")
        
        cleanupRecognition()
        
        currentQuestionId = UUID().uuidString
        print("‚úÖ Prepared for new question with ID: \(currentQuestionId ?? "unknown")")
        
        answerTimeout = Timer.scheduledTimer(withTimeInterval: 25.0, repeats: false) { _ in
            print("‚è∞ Question timeout reached")
            self.handleTimeout()
        }
        print("‚è∞ Question timer started for 25.0 seconds")
    }
    
    func speakQuestion(_ questionText: String) {
        print("üó£Ô∏è Speaking question: \(questionText) in language: \(currentLanguage)")
        
        guard !speechInProgress else {
            print("‚ö†Ô∏è Speech already in progress, skipping")
            return
        }
        
        speechInProgress = true
        
        if let voice = currentVoice {
            print("‚úÖ Using voice: \(voice.name) (\(voice.language))")
        }
        
        let utterance = AVSpeechUtterance(string: questionText)
        utterance.rate = 0.5
        utterance.volume = 1.0
        utterance.voice = currentVoice
        
        synthesizer.speak(utterance)
        print("üó£Ô∏è ‚ñ∂Ô∏è Speech started - will auto-start listening when finished")
    }
    
    func startListeningForAnswers() {
        print("üëÇ ===== ‚ö° ADVANCED AUTO-LISTENING =====")
        
        guard !listeningInProgress else {
            print("‚ö†Ô∏è Listening already in progress, skipping")
            return
        }
        
        guard !recognitionInProgress else {
            print("‚ö†Ô∏è Recognition already in progress, skipping")
            return
        }
        
        guard let currentQuestionId = currentQuestionId else {
            print("‚ùå No current question ID")
            return
        }
        
        guard audioEngineSetupCompleted else {
            print("‚ùå AudioEngine not properly setup")
            return
        }
        
        print("‚ö° ‚ö° STARTING ADVANCED AUTO-LISTENING for question: \(currentQuestionId)")
        
        listeningInProgress = true
        recognitionInProgress = true
        isListening = true
        listeningForAnswers = true
        
        do {
            recognitionTask?.cancel()
            recognitionTask = nil
            recognitionRequest?.endAudio()
            recognitionRequest = nil
            
            safelyStartAudioEngine()
            
            guard audioEngineStarted else {
                print("‚ùå Failed to start AudioEngine")
                cleanupRecognition()
                return
            }
            
            let recognitionRequest = SFSpeechAudioBufferRecognitionRequest()
            recognitionRequest.shouldReportPartialResults = true
            
            print("‚ö° ‚ö° Creating ADVANCED recognition task...")
            
            recognitionTask = speechRecognizer?.recognitionTask(with: recognitionRequest) { result, error in
                
                if let error = error {
                    print("‚ùå Recognition error: \(error.localizedDescription)")
                    DispatchQueue.main.async {
                        self.cleanupRecognition()
                    }
                    return
                }
                
                if let result = result {
                    let recognizedText = result.bestTranscription.formattedString.lowercased()
                    
                    print("üéØ ‚ö° Recognition: '\(result.bestTranscription.formattedString)' (final: \(result.isFinal))")
                    
                    DispatchQueue.main.async {
                        self.lastRecognizedText = result.bestTranscription.formattedString
                    }
                    
                    if currentQuestionId == self.currentQuestionId {
                        if result.isFinal {
                            print("üìù Final result - processing immediately: '\(recognizedText)'")
                            self.processRecognizedText(recognizedText)
                        } else {
                            self.scheduleDelayedProcessing(recognizedText, questionId: currentQuestionId)
                        }
                    } else {
                        print("üóëÔ∏è Ignoring result from previous question")
                    }
                }
            }
            
            let inputNode = audioEngine.inputNode
            let recordingFormat = inputNode.outputFormat(forBus: 0)
            
            inputNode.removeTap(onBus: 0)
            
            inputNode.installTap(onBus: 0, bufferSize: 1024, format: recordingFormat) { buffer, _ in
                recognitionRequest.append(buffer)
            }
            
            self.recognitionRequest = recognitionRequest
            print("‚úÖ ‚ö° ADVANCED Recognition setup completed - ready for answers!")
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 20.0) {
                if self.listeningForAnswers && self.currentQuestionId == currentQuestionId {
                    print("‚è∞ Answer timeout reached")
                    self.handleTimeout()
                }
            }
            
        } catch {
            print("‚ùå Failed to start listening: \(error)")
            cleanupRecognition()
        }
    }
    
    func stopListeningForAnswers() {
        print("üîá ===== STOPPING LISTENING FOR ANSWERS =====")
        
        listeningForAnswers = false
        
        answerTimeout?.invalidate()
        answerTimeout = nil
        
        delayedProcessingTimer?.invalidate()
        delayedProcessingTimer = nil
        
        recognitionInProgress = false
        
        print("‚úÖ Answer listening stopped")
    }
    
    private func scheduleDelayedProcessing(_ text: String, questionId: String) {
        guard !text.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
            print("‚ö†Ô∏è Empty text in delayed processing - skipping")
            return
        }
        
        guard recognitionInProgress else {
            print("‚ö†Ô∏è Recognition blocked - skipping delayed processing")
            return
        }
        
        delayedProcessingTimer?.invalidate()
        lastPartialResult = text
        
        delayedProcessingTimer = Timer.scheduledTimer(withTimeInterval: 0.8, repeats: false) { _ in
            if questionId == self.currentQuestionId && self.recognitionInProgress {
                print("‚è∞ Processing delayed result after pause: '\(text)'")
                self.processRecognizedText(text)
            } else {
                print("‚ö†Ô∏è Skipping delayed processing - question changed or recognition blocked")
            }
        }
        
        print("‚è±Ô∏è Scheduled FAST delayed processing for: '\(text)'")
    }
    
    private func processRecognizedText(_ text: String) {
        print("‚ö° Processing recognized text: '\(text)'")
        
        guard !text.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
            print("‚ö†Ô∏è Empty text - ignoring")
            return
        }
        
        Task { @MainActor in
            guard let gameManager = gameManager, gameManager.isRunning else {
                print("‚ö†Ô∏è Game not running - ignoring recognition result")
                return
            }
            
            if let number = extractNumber(from: text) {
                print("‚ö° Found number: \(number)")
                print("üìû Calling gameManager.checkAnswer(\(number))")
                
                recognitionInProgress = false
                
                delayedProcessingTimer?.invalidate()
                delayedProcessingTimer = nil
                
                stopListeningForAnswers()
                
                gameManager.checkAnswer(number)
            }
        }
    }
    
    private func extractNumber(from text: String) -> Int? {
        print("üîç Extracting from: '\(text)'")
        
        let complexNumbers: [String: Int] = [
            "–¥–≤–∞–¥—Ü–∞—Ç—å –æ–¥–∏–Ω": 21, "–¥–≤–∞–¥—Ü–∞—Ç—å –¥–≤–∞": 22, "–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–∏": 23, "–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç—ã—Ä–µ": 24, "–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å": 25,
            "–¥–≤–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç—å": 26, "–¥–≤–∞–¥—Ü–∞—Ç—å —Å–µ–º—å": 27, "–¥–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å–µ–º—å": 28, "–¥–≤–∞–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç—å": 29,
            "—Ç—Ä–∏–¥—Ü–∞—Ç—å –æ–¥–∏–Ω": 31, "—Ç—Ä–∏–¥—Ü–∞—Ç—å –¥–≤–∞": 32, "—Ç—Ä–∏–¥—Ü–∞—Ç—å —Ç—Ä–∏": 33, "—Ç—Ä–∏–¥—Ü–∞—Ç—å —á–µ—Ç—ã—Ä–µ": 34, "—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø—è—Ç—å": 35,
            "—Ç—Ä–∏–¥—Ü–∞—Ç—å —à–µ—Å—Ç—å": 36, "—Ç—Ä–∏–¥—Ü–∞—Ç—å —Å–µ–º—å": 37, "—Ç—Ä–∏–¥—Ü–∞—Ç—å –≤–æ—Å–µ–º—å": 38, "—Ç—Ä–∏–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç—å": 39,
            "—Å–æ—Ä–æ–∫ –æ–¥–∏–Ω": 41, "—Å–æ—Ä–æ–∫ –¥–≤–∞": 42, "—Å–æ—Ä–æ–∫ —Ç—Ä–∏": 43, "—Å–æ—Ä–æ–∫ —á–µ—Ç—ã—Ä–µ": 44, "—Å–æ—Ä–æ–∫ –ø—è—Ç—å": 45,
            "—Å–æ—Ä–æ–∫ —à–µ—Å—Ç—å": 46, "—Å–æ—Ä–æ–∫ —Å–µ–º—å": 47, "—Å–æ—Ä–æ–∫ –≤–æ—Å–µ–º—å": 48, "—Å–æ—Ä–æ–∫ –¥–µ–≤—è—Ç—å": 49,
            "–ø—è—Ç—å–¥–µ—Å—è—Ç –æ–¥–∏–Ω": 51, "–ø—è—Ç—å–¥–µ—Å—è—Ç –¥–≤–∞": 52, "–ø—è—Ç—å–¥–µ—Å—è—Ç —Ç—Ä–∏": 53, "–ø—è—Ç—å–¥–µ—Å—è—Ç —á–µ—Ç—ã—Ä–µ": 54, "–ø—è—Ç—å–¥–µ—Å—è—Ç –ø—è—Ç—å": 55,
            "–ø—è—Ç—å–¥–µ—Å—è—Ç —à–µ—Å—Ç—å": 56, "–ø—è—Ç—å–¥–µ—Å—è—Ç —Å–µ–º—å": 57, "–ø—è—Ç—å–¥–µ—Å—è—Ç –≤–æ—Å–µ–º—å": 58, "–ø—è—Ç—å–¥–µ—Å—è—Ç –¥–µ–≤—è—Ç—å": 59,
            "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –æ–¥–∏–Ω": 61, "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –¥–≤–∞": 62, "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç —Ç—Ä–∏": 63, "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç —á–µ—Ç—ã—Ä–µ": 64, "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –ø—è—Ç—å": 65,
            "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç —à–µ—Å—Ç—å": 66, "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç —Å–µ–º—å": 67, "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –≤–æ—Å–µ–º—å": 68, "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç –¥–µ–≤—è—Ç—å": 69,
            "—Å–µ–º—å–¥–µ—Å—è—Ç –æ–¥–∏–Ω": 71, "—Å–µ–º—å–¥–µ—Å—è—Ç –¥–≤–∞": 72, "—Å–µ–º—å–¥–µ—Å—è—Ç —Ç—Ä–∏": 73, "—Å–µ–º—å–¥–µ—Å—è—Ç —á–µ—Ç—ã—Ä–µ": 74, "—Å–µ–º—å–¥–µ—Å—è—Ç –ø—è—Ç—å": 75,
            "—Å–µ–º—å–¥–µ—Å—è—Ç —à–µ—Å—Ç—å": 76, "—Å–µ–º—å–¥–µ—Å—è—Ç —Å–µ–º—å": 77, "—Å–µ–º—å–¥–µ—Å—è—Ç –≤–æ—Å–µ–º—å": 78, "—Å–µ–º—å–¥–µ—Å—è—Ç –¥–µ–≤—è—Ç—å": 79,
            "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –æ–¥–∏–Ω": 81, "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –¥–≤–∞": 82, "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç —Ç—Ä–∏": 83, "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç —á–µ—Ç—ã—Ä–µ": 84, "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –ø—è—Ç—å": 85,
            "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç —à–µ—Å—Ç—å": 86, "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç —Å–µ–º—å": 87, "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –≤–æ—Å–µ–º—å": 88, "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –¥–µ–≤—è—Ç—å": 89,
            "–¥–µ–≤—è–Ω–æ—Å—Ç–æ –æ–¥–∏–Ω": 91, "–¥–µ–≤—è–Ω–æ—Å—Ç–æ –¥–≤–∞": 92, "–¥–µ–≤—è–Ω–æ—Å—Ç–æ —Ç—Ä–∏": 93, "–¥–µ–≤—è–Ω–æ—Å—Ç–æ —á–µ—Ç—ã—Ä–µ": 94, "–¥–µ–≤—è–Ω–æ—Å—Ç–æ –ø—è—Ç—å": 95,
            "–¥–µ–≤—è–Ω–æ—Å—Ç–æ —à–µ—Å—Ç—å": 96, "–¥–µ–≤—è–Ω–æ—Å—Ç–æ —Å–µ–º—å": 97, "–¥–µ–≤—è–Ω–æ—Å—Ç–æ –≤–æ—Å–µ–º—å": 98, "–¥–µ–≤—è–Ω–æ—Å—Ç–æ –¥–µ–≤—è—Ç—å": 99,
            
            "twenty one": 21, "twenty two": 22, "twenty three": 23, "twenty four": 24, "twenty five": 25,
            "twenty six": 26, "twenty seven": 27, "twenty eight": 28, "twenty nine": 29,
            "thirty one": 31, "thirty two": 32, "thirty three": 33, "thirty four": 34, "thirty five": 35,
            "thirty six": 36, "thirty seven": 37, "thirty eight": 38, "thirty nine": 39,
            "forty one": 41, "forty two": 42, "forty three": 43, "forty four": 44, "forty five": 45,
            "forty six": 46, "forty seven": 47, "forty eight": 48, "forty nine": 49,
            "fifty one": 51, "fifty two": 52, "fifty three": 53, "fifty four": 54, "fifty five": 55,
            "fifty six": 56, "fifty seven": 57, "fifty eight": 58, "fifty nine": 59,
            "sixty one": 61, "sixty two": 62, "sixty three": 63, "sixty four": 64, "sixty five": 65,
            "sixty six": 66, "sixty seven": 67, "sixty eight": 68, "sixty nine": 69,
            "seventy one": 71, "seventy two": 72, "seventy three": 73, "seventy four": 74, "seventy five": 75,
            "seventy six": 76, "seventy seven": 77, "seventy eight": 78, "seventy nine": 79,
            "eighty one": 81, "eighty two": 82, "eighty three": 83, "eighty four": 84, "eighty five": 85,
            "eighty six": 86, "eighty seven": 87, "eighty eight": 88, "eighty nine": 89,
            "ninety one": 91, "ninety two": 92, "ninety three": 93, "ninety four": 94, "ninety five": 95,
            "ninety six": 96, "ninety seven": 97, "ninety eight": 98, "ninety nine": 99
        ]
        
        for (phrase, number) in complexNumbers {
            if text.contains(phrase) {
                print("üéØ Found complex number match: \(number)")
                return number
            }
        }
        
        let numberWords: [String: Int] = [
            "–Ω–æ–ª—å": 0, "–æ–¥–∏–Ω": 1, "–æ–¥–Ω–∞": 1, "–¥–≤–∞": 2, "–¥–≤–µ": 2, "—Ç—Ä–∏": 3, "—á–µ—Ç—ã—Ä–µ": 4, "–ø—è—Ç—å": 5,
            "—à–µ—Å—Ç—å": 6, "—Å–µ–º—å": 7, "–≤–æ—Å–µ–º—å": 8, "–¥–µ–≤—è—Ç—å": 9, "–¥–µ—Å—è—Ç—å": 10,
            "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å": 11, "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å": 12, "—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å": 13, "—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å": 14, "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å": 15,
            "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å": 16, "—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å": 17, "–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å": 18, "–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å": 19,
            "–¥–≤–∞–¥—Ü–∞—Ç—å": 20, "—Ç—Ä–∏–¥—Ü–∞—Ç—å": 30, "—Å–æ—Ä–æ–∫": 40, "–ø—è—Ç—å–¥–µ—Å—è—Ç": 50, "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç": 60,
            "—Å–µ–º—å–¥–µ—Å—è—Ç": 70, "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç": 80, "–¥–µ–≤—è–Ω–æ—Å—Ç–æ": 90, "—Å—Ç–æ": 100,
            
            "zero": 0, "one": 1, "two": 2, "three": 3, "four": 4, "five": 5,
            "six": 6, "seven": 7, "eight": 8, "nine": 9, "ten": 10,
            "eleven": 11, "twelve": 12, "thirteen": 13, "fourteen": 14, "fifteen": 15,
            "sixteen": 16, "seventeen": 17, "eighteen": 18, "nineteen": 19,
            "twenty": 20, "thirty": 30, "forty": 40, "fifty": 50, "sixty": 60,
            "seventy": 70, "eighty": 80, "ninety": 90, "hundred": 100, "one hundred": 100
        ]
        
        for (word, number) in numberWords {
            if text.contains(word) {
                print("üéØ Found simple word match: \(number)")
                return number
            }
        }
        
        if let regex = try? NSRegularExpression(pattern: "\\d+") {
            let range = NSRange(location: 0, length: text.utf16.count)
            if let match = regex.firstMatch(in: text, options: [], range: range) {
                if let range = Range(match.range, in: text) {
                    let numberString = String(text[range])
                    if let number = Int(numberString) {
                        print("üéØ Found regex match: \(number)")
                        return number
                    }
                }
            }
        }
        
        print("‚ùå No number found in: '\(text)'")
        return nil
    }
    
    private func requestSpeechAuthorization() {
        SFSpeechRecognizer.requestAuthorization { authStatus in
            OperationQueue.main.addOperation {
                switch authStatus {
                case .authorized:
                    print("‚úÖ Speech recognition authorized")
                case .denied:
                    print("‚ùå Speech recognition authorization denied")
                case .restricted:
                    print("‚ùå Speech recognition restricted")
                case .notDetermined:
                    print("‚ùå Speech recognition not determined")
                @unknown default:
                    break
                }
            }
        }
    }
    
    func startListening() {
        print("üé§ ===== ACTIVATING MICROPHONE =====")
        
        guard !microphoneActive else {
            print("‚úÖ Microphone already active")
            return
        }
        
        microphoneActive = true
        
        if !audioEngineSetupCompleted {
            setupAudioEngine()
        }
        
        if audioEngineSetupCompleted {
            print("‚úÖ Audio engine ready - microphone is now ACTIVE")
        } else {
            print("‚ùå Failed to setup audio engine")
            microphoneActive = false
        }
    }
    
    private func handleTimeout() {
        print("‚è∞ ===== TIMEOUT REACHED =====")
        
        Task { @MainActor in
            guard let gameManager = gameManager, gameManager.isRunning else {
                print("‚ö†Ô∏è Game not running - skipping timeout handling")
                return
            }
            
            playTimeoutSound()
            cleanupRecognition()
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                guard gameManager.isRunning else {
                    print("‚ö†Ô∏è Game ended during timeout - not processing timeout")
                    return
                }
                
                print("‚è∞ Processing timeout as skipped question")
                gameManager.skipQuestion()
            }
        }
    }
    
    func stopListening() {
        print("üîá ===== STOPPING LISTENING =====")
        
        microphoneActive = false
        cleanupRecognition()
        
        if audioEngine.isRunning {
            audioEngine.stop()
            print("üîá AudioEngine stopped")
        }
        
        synthesizer.stopSpeaking(at: .immediate)
        
        print("‚úÖ All audio processes stopped")
    }
    
    func toggleLanguage() {
        if currentLanguage == "ru-RU" {
            currentLanguage = "en-US"
            speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: "en-US"))
            if let englishVoice = AVSpeechSynthesisVoice(language: "en-US") {
                currentVoice = englishVoice
            }
        } else {
            currentLanguage = "ru-RU"
            speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: "ru-RU"))
            let voices = AVSpeechSynthesisVoice.speechVoices()
            if let milenaVoice = voices.first(where: { $0.name.contains("Milena") && $0.language == "ru-RU" }) {
                currentVoice = milenaVoice
            } else if let russianVoice = AVSpeechSynthesisVoice(language: "ru-RU") {
                currentVoice = russianVoice
            }
        }
        
        print("üåç Language toggled to: \(currentLanguage)")
        print("üó£Ô∏è Voice changed to: \(currentVoice?.name ?? "default")")
        print("üëÇ Speech recognizer updated for: \(currentLanguage)")
    }
    
    // MARK: - AVSpeechSynthesizerDelegate
    
    func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didFinish utterance: AVSpeechUtterance) {
        print("üó£Ô∏è ‚èπÔ∏è ‚ö° Speech FINISHED - starting listening...")
        speechInProgress = false
        
        DispatchQueue.main.async {
            guard let gameManager = self.gameManager, gameManager.isRunning else {
                print("‚ö†Ô∏è Game not running - NOT starting listening after speech")
                return
            }
            
            if self.currentQuestionId != nil && !self.listeningInProgress {
                print("üëÇ ‚ö° AUTO-STARTING listening after speech!")
                self.startListeningForAnswers()
            } else {
                print("‚ö†Ô∏è Cannot start listening - no question or already listening")
            }
        }
    }
    
    func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didStart utterance: AVSpeechUtterance) {
        print("üó£Ô∏è ‚ñ∂Ô∏è Speech started")
    }
    
    func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didCancel utterance: AVSpeechUtterance) {
        print("üó£Ô∏è ‚ùå Speech cancelled")
        speechInProgress = false
    }
    
    // MARK: - Cleanup
    deinit {
        synthesizer.stopSpeaking(at: .immediate)
        if audioEngine.isRunning {
            audioEngine.stop()
        }
        
        print("üóëÔ∏è SpeechManager deinitalized - all audio stopped")
    }
}
