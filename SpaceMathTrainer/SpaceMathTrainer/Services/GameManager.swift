import Foundation
import AVFoundation
import Speech

@MainActor
class MathGameManager: ObservableObject {
    // MARK: - Published Properties
    @Published var isRunning = false
    @Published var currentQuestion = ""
    @Published var currentTaskIndex = 0
    @Published var correctAnswers = 0
    @Published var totalAnswers = 0
    @Published var statusMessage = ""
    @Published var statusType = ""
    @Published var gameResults: [TaskResult] = []
    
    // MARK: - Internal Properties
    private var tasks: [MathTask] = []
    private var currentTask: MathTask?
    private var correctAnswer: Int = 0
    private var questionStartTime: Date = Date()
    
    // MARK: - Dependencies
    weak var appState: AppState?
    weak var speechManager: SpeechManager?
    
    // MARK: - Audio Engine
    private var audioEngine = AVAudioEngine()
    private var speechSynthesizer = AVSpeechSynthesizer()
    
    // MARK: - Task Result Structure
    struct TaskResult {
        let question: String
        let userAnswer: String
        let correctAnswer: Int
        let isCorrect: Bool
        let responseTime: TimeInterval
        let timestamp: Date
    }
    
    // MARK: - Math Task Structure
    struct MathTask {
        let operation: MathOperation
        let operand1: Int
        let operand2: Int
        let correctAnswer: Int
        
        var questionText: String {
            return "\(operand1) \(operation.rawValue) \(operand2) = ?"
        }
        
        // –ù–û–í–û–ï: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –ë–ï–ó –∑–Ω–∞–∫–∞ "=" –∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        var spokenText: String {
            return getSpokenText(language: "ru") // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        }
        
        // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
        func getSpokenText(language: String) -> String {
            let operationWord: String
            
            if language == "en" {
                switch operation {
                case .addition:
                    operationWord = "plus"
                case .subtraction:
                    operationWord = "minus"
                case .multiplicationTable:
                    operationWord = "multiply by" // –ò–°–ü–†–ê–í–õ–ï–ù–û: —á–µ—Ç–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
                case .division:
                    operationWord = "divide by" // –ò–°–ü–†–ê–í–õ–ï–ù–û: —á–µ—Ç–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
                }
            } else {
                switch operation {
                case .addition:
                    operationWord = "–ø–ª—é—Å"
                case .subtraction:
                    operationWord = "–º–∏–Ω—É—Å"
                case .multiplicationTable:
                    operationWord = "—É–º–Ω–æ–∂–∏—Ç—å –Ω–∞"
                case .division:
                    operationWord = "—Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞"
                }
            }
            
            return "\(operand1) \(operationWord) \(operand2)"
        }
    }
    
    // MARK: - Game Control Methods
    func startTraining() {
        print("üöÄ Starting training...")
        
        guard let appState = appState else {
            print("‚ùå AppState not available")
            return
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        generateTasks()
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
        isRunning = true
        currentTaskIndex = 0
        correctAnswers = 0
        totalAnswers = 0
        gameResults.removeAll()
        statusMessage = ""
        statusType = ""
        
        // –£–ë–†–ê–ù–û: –¢–µ—Å—Ç –∑–≤—É–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã - —ç—Ç–æ –º–µ—à–∞–µ—Ç
        // speechManager?.testReliableSounds()
        
        // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–≤—É–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ë–ï–ó —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        let soundsWorking = speechManager?.checkSoundStatus() ?? false
        if !soundsWorking {
            print("‚ö†Ô∏è Sound system may have issues - check audio setup")
        } else {
            print("üîä Sound system ready - you WILL hear sounds during gameplay!")
        }
        
        // –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        speechManager?.startListening()
        print("üé§ Microphone activated automatically")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
        presentNextTask()
        
        print("‚úÖ Training started with \(tasks.count) tasks")
    }
    
    func endTraining() {
        print("üèÅ Ending training...")
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        isRunning = false
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
        speechManager?.stopListeningForAnswers()
        speechManager?.stopListening()
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—á—å
        speechSynthesizer.stopSpeaking(at: .immediate)
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        currentQuestion = ""
        statusMessage = ""
        statusType = ""
        currentTask = nil
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        showFinalResults()
        
        print("‚úÖ Training ended - all processes stopped")
    }
    
    // MARK: - Task Generation
    private func generateTasks() {
        guard let appState = appState else { return }
        
        tasks.removeAll()
        let taskCount = appState.tasksCount
        let selectedOperations = appState.selectedOperations
        let difficulty = appState.selectedDifficulty
        
        print("üéØ Generating \(taskCount) tasks for operations: \(selectedOperations)")
        
        for _ in 0..<taskCount {
            if let operation = selectedOperations.randomElement() {
                let task = generateTask(for: operation, difficulty: difficulty)
                tasks.append(task)
            }
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks.shuffle()
        
        print("‚úÖ Generated \(tasks.count) tasks")
    }
    
    private func generateTask(for operation: MathOperation, difficulty: Difficulty) -> MathTask {
        switch operation {
        case .addition:
            return generateAdditionTask(difficulty: difficulty)
        case .subtraction:
            return generateSubtractionTask(difficulty: difficulty)
        case .multiplicationTable: // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ .multiplication
            return generateMultiplicationTableTask(difficulty: difficulty)
        case .division:
            return generateDivisionTask(difficulty: difficulty)
        }
    }
    
    // MARK: - Operation-specific Task Generation
    private func generateAdditionTask(difficulty: Difficulty) -> MathTask {
        let (min, max) = getRangeForDifficulty(difficulty)
        let operand1 = Int.random(in: min...max)
        let operand2 = Int.random(in: min...max)
        let answer = operand1 + operand2
        
        return MathTask(
            operation: .addition,
            operand1: operand1,
            operand2: operand2,
            correctAnswer: answer
        )
    }
    
    private func generateSubtractionTask(difficulty: Difficulty) -> MathTask {
        let (min, max) = getRangeForDifficulty(difficulty)
        let operand1 = Int.random(in: min...max)
        let operand2 = Int.random(in: min...operand1) // Ensure positive result
        let answer = operand1 - operand2
        
        return MathTask(
            operation: .subtraction,
            operand1: operand1,
            operand2: operand2,
            correctAnswer: answer
        )
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –º–µ—Ç–æ–¥ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω operation
    private func generateGeneralMultiplicationTask(difficulty: Difficulty) -> MathTask {
        let (min, max) = getMultiplicationRangeForDifficulty(difficulty)
        let operand1 = Int.random(in: min...max)
        let operand2 = Int.random(in: min...max)
        let answer = operand1 * operand2
        
        return MathTask(
            operation: .multiplicationTable, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ .multiplication
            operand1: operand1,
            operand2: operand2,
            correctAnswer: answer
        )
    }
    
    private func generateDivisionTask(difficulty: Difficulty) -> MathTask {
        let (min, max) = getMultiplicationRangeForDifficulty(difficulty)
        let divisor = Int.random(in: min...max)
        let quotient = Int.random(in: min...max)
        let dividend = divisor * quotient // Ensure exact division
        
        return MathTask(
            operation: .division,
            operand1: dividend,
            operand2: divisor,
            correctAnswer: quotient
        )
    }
    
    // MARK: - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —É–º–Ω–æ–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    private func generateMultiplicationTableTask(difficulty: Difficulty) -> MathTask {
        guard let appState = appState else {
            // Fallback
            return MathTask(operation: .multiplicationTable, operand1: 2, operand2: 3, correctAnswer: 6)
        }
        
        let selectedMultiplier = appState.selectedMultiplier
        
        if selectedMultiplier == 0 {
            // –°–ª—É—á–∞–π–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            let (min, max) = getMultiplicationRangeForDifficulty(difficulty)
            
            let multiplier: Int
            let multiplicand: Int
            
            switch difficulty {
            case .easy:
                // –û–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞ (1-9)
                multiplier = Int.random(in: min...max)
                multiplicand = Int.random(in: min...max)
                
            case .medium:
                // –û–¥–∏–Ω –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π (1-9), –≤—Ç–æ—Ä–æ–π –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–≤—É–∑–Ω–∞—á–Ω—ã–º (10-99)
                if Bool.random() {
                    // –ü–µ—Ä–≤—ã–π –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π, –≤—Ç–æ—Ä–æ–π –¥–≤—É–∑–Ω–∞—á–Ω—ã–π
                    multiplier = Int.random(in: 1...9)
                    multiplicand = Int.random(in: 10...99)
                } else {
                    // –ü–µ—Ä–≤—ã–π –¥–≤—É–∑–Ω–∞—á–Ω—ã–π, –≤—Ç–æ—Ä–æ–π –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π
                    multiplier = Int.random(in: 10...99)
                    multiplicand = Int.random(in: 1...9)
                }
                
            case .hard:
                // –î–≤—É–∑–Ω–∞—á–Ω—ã–µ –Ω–∞ –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ (10-99)
                multiplier = Int.random(in: min...max)
                multiplicand = Int.random(in: min...max)
            }
            
            let answer = multiplier * multiplicand
            
            return MathTask(
                operation: .multiplicationTable,
                operand1: multiplier,
                operand2: multiplicand,
                correctAnswer: answer
            )
        } else {
            // –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞ 3)
            // –í—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞–Ω–¥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            let multiplicand: Int
            
            switch difficulty {
            case .easy:
                multiplicand = Int.random(in: 1...9)
            case .medium:
                multiplicand = Int.random(in: 1...12)
            case .hard:
                multiplicand = Int.random(in: 1...15)
            }
            
            let answer = selectedMultiplier * multiplicand
            
            return MathTask(
                operation: .multiplicationTable,
                operand1: selectedMultiplier,
                operand2: multiplicand,
                correctAnswer: answer
            )
        }
    }
    
    // MARK: - Difficulty Ranges
    private func getRangeForDifficulty(_ difficulty: Difficulty) -> (Int, Int) {
        switch difficulty {
        case .easy:
            return (1, 10)
        case .medium:
            return (1, 50)
        case .hard:
            return (1, 100)
        }
    }
    
    private func getMultiplicationRangeForDifficulty(_ difficulty: Difficulty) -> (Int, Int) {
        switch difficulty {
        case .easy:
            return (1, 9)      // –û–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞
        case .medium:
            return (1, 99)     // –û–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ –∏ –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ (—Å–ª—É—á–∞–π–Ω—ã–µ)
        case .hard:
            return (10, 99)    // –î–≤—É–∑–Ω–∞—á–Ω—ã–µ –Ω–∞ –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ
        }
    }
    
    // MARK: - Task Presentation
    private func presentNextTask() {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–∞ –µ—â–µ –∏–¥–µ—Ç
        guard isRunning else {
            print("‚ö†Ô∏è Game is not running - not presenting next task")
            return
        }
        
        guard currentTaskIndex < tasks.count else {
            print("üèÅ All tasks completed - ending training")
            endTraining()
            return
        }
        
        currentTask = tasks[currentTaskIndex]
        currentQuestion = currentTask?.questionText ?? ""
        questionStartTime = Date()
        
        print("üìù Presenting task \(currentTaskIndex + 1)/\(tasks.count): \(currentQuestion)")
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
        statusMessage = ""
        statusType = ""
        
        // –ù–û–í–û–ï: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SpeechManager –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
        speechManager?.prepareForNewQuestion()
        
        // –ü—Ä–æ–∏–∑–Ω–æ—Å–∏–º –≤–æ–ø—Ä–æ—Å (–ë–ï–ó –∑–Ω–∞–∫–∞ "=")
        speakQuestion()
    }
    
    func repeatQuestion() {
        print("üîÑ Repeating question")
        guard let currentTask = currentTask, let appState = appState else { return }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–≤—Ç–æ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å –ë–ï–ó –∑–Ω–∞–∫–∞ "=" —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —è–∑—ã–∫–æ–º
        let language = appState.selectedLanguage
        let questionToSpeak = currentTask.getSpokenText(language: language)
        speechManager?.speakQuestion(questionToSpeak)
    }
    
    func skipQuestion() {
        print("‚è≠Ô∏è Skipping question")
        
        if let task = currentTask {
            recordAnswer(userInput: "", isCorrect: false)
        }
        
        moveToNextTask()
    }
    
    private func moveToNextTask() {
        guard isRunning else {
            print("‚ö†Ô∏è Game ended - not moving to next task")
            return
        }
        
        currentTaskIndex += 1
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å–∫–æ—Ä–∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ (—Å 1.0 –¥–æ 0.5 —Å–µ–∫—É–Ω–¥—ã)
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.8) {
            // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –∏–¥–µ—Ç
            guard self.isRunning else {
                print("‚ö†Ô∏è Game ended during transition - stopping")
                return
            }
            self.presentNextTask()
        }
    }
    
    // MARK: - Answer Processing
    func processAnswer(_ recognizedText: String) {
        print("üéØ Processing answer: '\(recognizedText)'")
        
        guard let task = currentTask else {
            print("‚ùå No current task")
            return
        }
        
        guard isRunning else {
            print("‚ö†Ô∏è Game not running - ignoring answer")
            return
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        let extractedNumber = extractNumberFromText(recognizedText)
        let isCorrect = (extractedNumber == task.correctAnswer)
        
        recordAnswer(userInput: recognizedText, isCorrect: isCorrect)
        
        if isCorrect {
            correctAnswers += 1
            showSuccessMessage()
            speechManager?.playCorrectSound()
        } else {
            showErrorMessage(correctAnswer: task.correctAnswer)
            speechManager?.playIncorrectSound()
        }
        
        totalAnswers += 1
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
            self.moveToNextTask()
        }
    }
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å SpeechManager
    func checkAnswer(_ number: Int) {
        print("üéØ Checking answer: \(number)")
        
        guard let task = currentTask else {
            print("‚ùå No current task")
            return
        }
        
        guard isRunning else {
            print("‚ö†Ô∏è Game not running - ignoring answer")
            return
        }
        
        let isCorrect = (number == task.correctAnswer)
        
        recordAnswer(userInput: String(number), isCorrect: isCorrect)
        
        if isCorrect {
            correctAnswers += 1
            showSuccessMessage()
            speechManager?.playCorrectSound()
        } else {
            showErrorMessage(correctAnswer: task.correctAnswer)
            speechManager?.playIncorrectSound()
        }
        
        totalAnswers += 1
        
        print("üìà Progress: \(totalAnswers)/\(tasks.count), Correct: \(correctAnswers)")
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –∫–æ–Ω—Ü–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if totalAnswers >= tasks.count {
            print("üèÅ All tasks completed - ending training")
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
                self.endTraining()
            }
        } else {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
                self.moveToNextTask()
            }
        }
    }
    
    private func extractNumberFromText(_ text: String) -> Int {
        // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        let numberStrings = text.components(separatedBy: CharacterSet.decimalDigits.inverted)
        for numberString in numberStrings {
            if let number = Int(numberString), !numberString.isEmpty {
                return number
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º -1
        return -1
    }
    
    private func recordAnswer(userInput: String, isCorrect: Bool) {
        guard let task = currentTask else { return }
        
        let responseTime = Date().timeIntervalSince(questionStartTime)
        let result = TaskResult(
            question: task.questionText,
            userAnswer: userInput,
            correctAnswer: task.correctAnswer,
            isCorrect: isCorrect,
            responseTime: responseTime,
            timestamp: Date()
        )
        
        gameResults.append(result)
        
        print("üìä Recorded result: \(isCorrect ? "‚úÖ" : "‚ùå") Answer: \(userInput), Correct: \(task.correctAnswer)")
    }
    
    // MARK: - Feedback Messages
    private func showSuccessMessage() {
        guard let appState = appState else { return }
        
        let language = appState.selectedLanguage
        let messages = language == "en" ?
            ["Excellent!", "Correct!", "Great!", "Awesome!", "Perfect!"] :
            ["–û—Ç–ª–∏—á–Ω–æ!", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!", "–ú–æ–ª–æ–¥–µ—Ü!", "–°—É–ø–µ—Ä!", "–ó–¥–æ—Ä–æ–≤–æ!"]
        
        statusMessage = messages.randomElement() ?? (language == "en" ? "Correct!" : "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        statusType = "success"
    }
    
    private func showErrorMessage(correctAnswer: Int) {
        guard let appState = appState else { return }
        
        let language = appState.selectedLanguage
        statusMessage = language == "en" ?
            "Correct answer: \(correctAnswer)" :
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: \(correctAnswer)"
        statusType = "error"
    }
    
    private func showFinalResults() {
        guard let appState = appState else { return }
        
        let language = appState.selectedLanguage
        let percentage = totalAnswers > 0 ? (correctAnswers * 100) / totalAnswers : 0
        
        statusMessage = language == "en" ?
            "Result: \(correctAnswers)/\(totalAnswers) (\(percentage)%)" :
            "–†–µ–∑—É–ª—å—Ç–∞—Ç: \(correctAnswers)/\(totalAnswers) (\(percentage)%)"
        statusType = totalAnswers > 0 && percentage >= 70 ? "success" : "warning"
        
        print("üèÜ Final Results: \(correctAnswers)/\(totalAnswers) (\(percentage)%)")
    }
    
    // MARK: - Speech Output
    private func speakQuestion() {
        guard let appState = appState, let currentTask = currentTask else { return }
        
        guard isRunning else {
            print("‚ö†Ô∏è Game not running - not speaking question")
            return
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º —è–∑—ã–∫ –∏–∑ appState
        let language = appState.selectedLanguage
        let questionToSpeak = currentTask.getSpokenText(language: language)
        print("üîä Speaking question in \(language): \(questionToSpeak)")
        
        // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SpeechManager –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        speechManager?.speakQuestion(questionToSpeak)
    }
    
    private func speakText(_ text: String, language: String) {
        let utterance = AVSpeechUtterance(string: text)
        utterance.voice = AVSpeechSynthesisVoice(language: language)
        utterance.rate = 0.5
        utterance.volume = 1.0
        
        speechSynthesizer.speak(utterance)
        
        print("üîä Speaking: \(text)")
    }
    
    // MARK: - Language Management
    func updateLanguage(_ language: String) {
        print("üåç GameManager: Updating language to \(language)")
        speechManager?.setup(language: language)
    }
    
    // –ù–û–í–´–ô –ú–ï–¢–û–î: –¢–µ—Å—Ç –∑–≤—É–∫–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –∏–≥—Ä—ã
    func testSounds() {
        print("üß™ Testing sounds independently...")
        speechManager?.testReliableSounds()
    }
    
    // MARK: - Cleanup
    deinit {
        speechSynthesizer.stopSpeaking(at: .immediate)
        if audioEngine.isRunning {
            audioEngine.stop()
        }
    }
}
