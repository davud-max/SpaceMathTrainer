import SwiftUI
import UIKit
import AudioToolbox
import AVFoundation

class AppState: ObservableObject {
    @Published var selectedOperations: Set<MathOperation> = [.addition]
    @Published var selectedDifficulty: Difficulty = .easy
    @Published var tasksCount: Int = 10
    @Published var answerTimeLimit: Double = 15.0 {
        didSet {
            if answerTimeLimit > 30.0 {
                answerTimeLimit = 30.0
            }
        }
    }
    
    // –û–ë–ù–û–í–õ–ï–ù–û: selectedMultiplier —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º
    // 0 = —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º (1-9), 2-9 = –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    @Published var selectedMultiplier: Int = 2
    
    // MARK: - Localization Support
    @Published var selectedLanguage: String = "ru"
    
    var availableLanguages: [String] {
        return ["ru", "en"]
    }
    
    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å SpeechManager –¥–ª—è iPhone
    func changeLanguage(to newLanguage: String) {
        print("üåç AppState: Changing language from \(selectedLanguage) to \(newLanguage)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —è–∑—ã–∫ –º–µ–Ω—è–µ—Ç—Å—è
        guard selectedLanguage != newLanguage else {
            print("üåç AppState: Language already is \(newLanguage), no change needed")
            return
        }
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø —Ç–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –Ω–∞ iPhone
        DispatchQueue.main.async {
            let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
            impactFeedback.prepare()
            impactFeedback.impactOccurred()
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–≤—É–∫ –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
            AudioServicesPlaySystemSound(1100) // Camera_Shutter –∑–≤—É–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        selectedLanguage = newLanguage
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º SpeechManager
        DispatchQueue.main.async {
            if let speechManager = self.getSpeechManager() as? SpeechManager {
                print("üîÑ AppState: Immediately notifying SpeechManager about language change")
                speechManager.changeLanguage(to: newLanguage)
            } else {
                print("‚ö†Ô∏è AppState: SpeechManager not found!")
                
                // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ SpeechManager —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                    if let speechManager = self.getSpeechManager() as? SpeechManager {
                        print("üîÑ AppState: Found SpeechManager with delay, notifying about language change")
                        speechManager.changeLanguage(to: newLanguage)
                    }
                }
            }
        }
    }
    
    // –ù–û–í–´–ô –ú–ï–¢–û–î: toggleLanguage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ContentView
    func toggleLanguage() {
        let newLanguage = selectedLanguage == "ru" ? "en" : "ru"
        changeLanguage(to: newLanguage)
        print("üîÑ AppState: Language toggled to \(selectedLanguage)")
    }
    
    // MARK: - Compatibility Properties
    var currentLanguage: String {
        get {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–¥ –ª–æ–∫–∞–ª–∏ –¥–ª—è SpeechManager
            switch selectedLanguage {
            case "en": return "en-US"
            case "ru": return "ru-RU"
            default: return selectedLanguage
            }
        }
        set {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–¥
            if newValue.hasPrefix("en") {
                selectedLanguage = "en"
            } else if newValue.hasPrefix("ru") {
                selectedLanguage = "ru"
            } else {
                selectedLanguage = newValue
            }
        }
    }
    
    var currentDifficulty: Difficulty {
        get { selectedDifficulty }
        set { selectedDifficulty = newValue }
    }
    
    func localizedString(_ key: String) -> String {
        switch selectedLanguage {
        case "en":
            return getEnglishString(key)
        default:
            return getRussianString(key)
        }
    }
    
    private func getEnglishString(_ key: String) -> String {
        switch key {
        // Main menu
        case "practice": return "PRACTICE"
        case "statistics": return "STATISTICS"
        case "settings": return "SETTINGS"
        case "start_mission": return "START MISSION"
        case "launch_mission": return "LAUNCH MISSION"
        case "exit": return "EXIT"
        case "menu": return "MENU"
        case "restart": return "RESTART"
        case "game_complete": return "MISSION COMPLETE"
        
        // Language and interface
        case "language": return "LANGUAGE"
        case "language_title": return "LANGUAGE"
        case "app_title_cosmic": return "COSMIC"
        case "app_title_math": return "MATH TRAINER"
        case "app_title": return "MATH TRAINER" // –ù–û–í–û–ï –¥–ª—è ContentView
        
        // Operations
        case "operations": return "OPERATIONS"
        case "operations_title": return "OPERATIONS"
        case "addition": return "Addition"
        case "subtraction": return "Subtraction"
        case "multiplication": return "Multiplication"
        case "multiplicationTable": return "Multiplication Table" // –ù–û–í–û–ï
        case "division": return "Division"
        
        // –û–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ —Å–∏–º–≤–æ–ª—ã (–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ MathOperation.rawValue)
        case "+": return "Addition"
        case "‚àí": return "Subtraction"
        case "√ó": return "Multiplication"
        case "table√ó": return "Multiplication Table"
        case "√∑": return "Division"
        
        // –ù–û–í–´–ï –ü–ï–†–ï–í–û–î–´ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        case "randomMultipliers": return "Random multipliers"
        case "from2to9": return "from 2 to 9"
        case "chooseMultiplicand": return "Choose multiplicand:"
        case "close": return "Close"
        
        // Multiplier selection
        case "select_multiplier": return "Select Number"
        case "multiplication_table_for": return "Multiplication table for %@"
        case "example_questions": return "Example questions:"
        
        // Difficulty
        case "difficulty": return "DIFFICULTY"
        case "difficulty_title": return "DIFFICULTY"
        case "easy": return "Easy"
        case "medium": return "Medium"
        case "hard": return "Hard"
        
        // Parameters
        case "parameters_title": return "SETTINGS"
        case "tasks_count": return "Number of Problems"
        case "answer_time": return "Time per Problem"
        case "time_limit": return "Time Limit"
        case "seconds": return "sec"
        
        // Game interface
        case "mission_active": return "MISSION ACTIVE"
        case "score": return "SCORE"
        case "task_of": return "Problem %@ of %@"
        
        // Microphone and speech
        case "microphone_active": return "MICROPHONE ON"
        case "microphone_off": return "MICROPHONE OFF"
        case "listening": return "Listening for your answer..."
        case "say_answer": return "Say your answer aloud"
        case "recognized": return "Heard:"
        
        // Controls
        case "repeat": return "REPEAT"
        case "skip": return "SKIP"
        case "finish": return "FINISH"
        case "start_training": return "START TRAINING" // –ù–û–í–û–ï
        case "stop_training": return "STOP" // –ù–û–í–û–ï
        case "repeat_question": return "REPEAT" // –ù–û–í–û–ï
        case "skip_question": return "SKIP" // –ù–û–í–û–ï
        
        // Status messages
        case "correct": return "‚úÖ Correct!"
        case "incorrect": return "‚ùå Wrong! Answer: %@"
        case "timeout": return "‚è∞ Time's up! Answer: %@"
        case "skipped": return "‚è≠Ô∏è Skipped! Answer: %@"
        case "training_complete": return "Training complete! Score: %@ out of %@ (%@%%)"
        
        // Speech operations (for voice synthesis)
        case "plus": return "plus"
        case "minus": return "minus"
        case "times": return "times"
        case "divided_by": return "divided by"
        
        default: return key.uppercased()
        }
    }
    
    private func getRussianString(_ key: String) -> String {
        switch key {
        // Main menu
        case "practice": return "–ü–†–ê–ö–¢–ò–ö–ê"
        case "statistics": return "–°–¢–ê–¢–ò–°–¢–ò–ö–ê"
        case "settings": return "–ù–ê–°–¢–†–û–ô–ö–ò"
        case "start_mission": return "–ó–ê–ü–£–°–¢–ò–¢–¨ –ú–ò–°–°–ò–Æ"
        case "launch_mission": return "–ó–ê–ü–£–°–¢–ò–¢–¨ –ú–ò–°–°–ò–Æ"
        case "exit": return "–í–´–•–û–î"
        case "menu": return "–ú–ï–ù–Æ"
        case "restart": return "–ü–û–í–¢–û–†–ò–¢–¨"
        case "game_complete": return "–ú–ò–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê"
        
        // Language and interface
        case "language": return "–Ø–ó–´–ö"
        case "language_title": return "–Ø–ó–´–ö"
        case "app_title_cosmic": return "–ö–û–°–ú–ò–ß–ï–°–ö–ò–ô"
        case "app_title_math": return "–ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–†–ï–ù–ê–ñ–Å–†"
        case "app_title": return "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–∞–∂—ë—Ä" // –ù–û–í–û–ï –¥–ª—è ContentView
        
        // Operations
        case "operations": return "–û–ü–ï–†–ê–¶–ò–ò"
        case "operations_title": return "–û–ü–ï–†–ê–¶–ò–ò"
        case "addition": return "–°–ª–æ–∂–µ–Ω–∏–µ"
        case "subtraction": return "–í—ã—á–∏—Ç–∞–Ω–∏–µ"
        case "multiplication": return "–£–º–Ω–æ–∂–µ–Ω–∏–µ"
        case "multiplicationTable": return "–¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è" // –ù–û–í–û–ï
        case "division": return "–î–µ–ª–µ–Ω–∏–µ"
        
        // –û–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ —Å–∏–º–≤–æ–ª—ã (–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ MathOperation.rawValue)
        case "+": return "–°–ª–æ–∂–µ–Ω–∏–µ"
        case "‚àí": return "–í—ã—á–∏—Ç–∞–Ω–∏–µ"
        case "√ó": return "–£–º–Ω–æ–∂–µ–Ω–∏–µ"
        case "table√ó": return "–¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è"
        case "√∑": return "–î–µ–ª–µ–Ω–∏–µ"
        
        // –ù–û–í–´–ï –ü–ï–†–ï–í–û–î–´ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        case "randomMultipliers": return "–°–ª—É—á–∞–π–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏"
        case "from2to9": return "–æ—Ç 2 –¥–æ 9"
        case "chooseMultiplicand": return "–í—ã–±–æ—Ä –º–Ω–æ–∂–∏–º–æ–≥–æ:"
        case "close": return "–ó–∞–∫—Ä—ã—Ç—å"
        
        // Multiplier selection
        case "select_multiplier": return "–í—ã–±—Ä–∞—Ç—å —á–∏—Å–ª–æ"
        case "multiplication_table_for": return "–¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ %@"
        case "example_questions": return "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:"
        
        // Difficulty
        case "difficulty": return "–°–õ–û–ñ–ù–û–°–¢–¨"
        case "difficulty_title": return "–°–õ–û–ñ–ù–û–°–¢–¨"
        case "easy": return "–õ—ë–≥–∫–∏–π"
        case "medium": return "–°—Ä–µ–¥–Ω–∏–π"
        case "hard": return "–°–ª–æ–∂–Ω—ã–π"
        
        // Parameters
        case "parameters_title": return "–ü–ê–†–ê–ú–ï–¢–†–´"
        case "tasks_count": return "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π"
        case "answer_time": return "–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç"
        case "time_limit": return "–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç"
        case "seconds": return "—Å–µ–∫"
        
        // Game interface
        case "mission_active": return "–ú–ò–°–°–ò–Ø –ê–ö–¢–ò–í–ù–ê"
        case "score": return "–°–ß–Å–¢"
        case "task_of": return "–ó–∞–¥–∞–Ω–∏–µ %@ –∏–∑ %@"
        
        // Microphone and speech
        case "microphone_active": return "–ú–ò–ö–†–û–§–û–ù –í–ö–õ–Æ–ß–Å–ù"
        case "microphone_off": return "–ú–ò–ö–†–û–§–û–ù –í–´–ö–õ–Æ–ß–ï–ù"
        case "listening": return "–°–ª—É—à–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç..."
        case "say_answer": return "–°–∫–∞–∂–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω"
        case "recognized": return "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:"
        
        // Controls
        case "repeat": return "–ü–û–í–¢–û–†–ò–¢–¨"
        case "skip": return "–ü–†–û–ü–£–°–¢–ò–¢–¨"
        case "finish": return "–ó–ê–í–ï–†–®–ò–¢–¨"
        case "start_training": return "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" // –ù–û–í–û–ï
        case "stop_training": return "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" // –ù–û–í–û–ï
        case "repeat_question": return "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" // –ù–û–í–û–ï
        case "skip_question": return "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" // –ù–û–í–û–ï
        
        // Status messages
        case "correct": return "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        case "incorrect": return "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–≤–µ—Ç: %@"
        case "timeout": return "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –û—Ç–≤–µ—Ç: %@"
        case "skipped": return "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ! –û—Ç–≤–µ—Ç: %@"
        case "training_complete": return "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç: %@ –∏–∑ %@ (%@%%)"
        
        // Speech operations (for voice synthesis)
        case "plus": return "–ø–ª—é—Å"
        case "minus": return "–º–∏–Ω—É—Å"
        case "times": return "—É–º–Ω–æ–∂–∏—Ç—å –Ω–∞"
        case "divided_by": return "—Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞"
        
        default: return key.uppercased()
        }
    }
    
    // MARK: - Speech Manager Support (–£–õ–£–ß–®–ï–ù–û –¥–ª—è iPhone)
    private weak var speechManager: AnyObject?
    
    func setSpeechManager(_ manager: Any?) {
        print("üîó AppState: Setting SpeechManager reference")
        self.speechManager = manager as AnyObject
        
        // –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —è–∑—ã–∫ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–≤—è–∑–∏
        if let speechManager = manager as? SpeechManager {
            print("üîÑ AppState: Immediately syncing language with newly set SpeechManager")
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                speechManager.setup(language: self.selectedLanguage)
            }
        }
    }
    
    func getSpeechManager() -> Any? {
        return speechManager
    }
    
    // MARK: - Validation
    var canLaunch: Bool {
        !selectedOperations.isEmpty
    }
    
    // MARK: - Operation Management —Å —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –¥–ª—è iPhone
    func toggleOperation(_ operation: MathOperation) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
        DispatchQueue.main.async {
            let impactFeedback = UIImpactFeedbackGenerator(style: .light)
            impactFeedback.prepare()
            impactFeedback.impactOccurred()
            
            // –ó–≤—É–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
            AudioServicesPlaySystemSound(1102) // Tweet –∑–≤—É–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        }
        
        if selectedOperations.contains(operation) {
            if selectedOperations.count > 1 {
                selectedOperations.remove(operation)
            }
        } else {
            selectedOperations.insert(operation)
        }
    }
    
    func canDeselectOperation(_ operation: MathOperation) -> Bool {
        return selectedOperations.count > 1 || !selectedOperations.contains(operation)
    }
    
    // MARK: - Helper Methods
    func getLocalizedOperationName(_ operation: MathOperation) -> String {
        switch operation {
        case .addition: return localizedString("addition")
        case .subtraction: return localizedString("subtraction")
        case .multiplicationTable: return localizedString("multiplicationTable") // –û–ë–ù–û–í–õ–ï–ù–û
        case .division: return localizedString("division")
        }
    }
    
    func getLocalizedDifficultyName(_ difficulty: Difficulty) -> String {
        switch difficulty {
        case .easy: return localizedString("easy")
        case .medium: return localizedString("medium")
        case .hard: return localizedString("hard")
        }
    }
    
    // MARK: - Speech Operation Names
    func getLocalizedOperationSpeech(_ operation: MathOperation) -> String {
        // –û–ë–ù–û–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —É–º–Ω–æ–∂–µ–Ω–∏—è
        if operation == .multiplicationTable {
            // –ò –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ, –∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º "—É–º–Ω–æ–∂–∏—Ç—å –Ω–∞"
            return selectedLanguage == "ru" ? "—É–º–Ω–æ–∂–∏—Ç—å –Ω–∞" : "times"
        }
        
        switch operation {
        case .addition: return localizedString("plus")
        case .subtraction: return localizedString("minus")
        case .multiplicationTable: return localizedString("times") // –ù–û–í–û–ï: —Ç–æ–∂–µ "—É–º–Ω–æ–∂–∏—Ç—å –Ω–∞"
        case .division: return localizedString("divided_by")
        }
    }
    
    // MARK: - –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –¥–ª—è iPhone
    func testCurrentVoice() {
        guard let speechManager = getSpeechManager() as? SpeechManager else {
            print("‚ö†Ô∏è AppState: No SpeechManager available for voice test")
            return
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
        DispatchQueue.main.async {
            let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
            impactFeedback.prepare()
            impactFeedback.impactOccurred()
            
            // –ó–≤—É–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
            AudioServicesPlaySystemSound(1101) // Calendar_Alert –∑–≤—É–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
        }
        
        let testText = selectedLanguage == "en" ? "Hello, this is a voice test" : "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–∞"
        print("üé§ AppState: Testing voice with text: '\(testText)'")
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
            speechManager.speak(testText)
        }
    }
    
    // MARK: - –ù–û–í–´–ï –ú–ï–¢–û–î–´: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞–º–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –¥–ª—è iPhone
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    func playSuccessSound() {
        DispatchQueue.main.async {
            AudioServicesPlaySystemSound(1016) // Success sound
            
            let successFeedback = UINotificationFeedbackGenerator()
            successFeedback.notificationOccurred(.success)
        }
    }
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    func playWarningSound() {
        DispatchQueue.main.async {
            AudioServicesPlaySystemSound(1057) // Tink sound
            
            let warningFeedback = UINotificationFeedbackGenerator()
            warningFeedback.notificationOccurred(.warning)
        }
    }
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –æ—à–∏–±–∫–∏
    func playErrorSound() {
        DispatchQueue.main.async {
            AudioServicesPlaySystemSound(1073) // Sosumi sound
            
            let errorFeedback = UINotificationFeedbackGenerator()
            errorFeedback.notificationOccurred(.error)
        }
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
    func playVibration() {
        DispatchQueue.main.async {
            AudioServicesPlaySystemSound(kSystemSoundID_Vibrate)
        }
    }
    
    // MARK: - –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    func checkMicrophonePermission(completion: @escaping (Bool) -> Void) {
        switch AVAudioSession.sharedInstance().recordPermission {
        case .granted:
            completion(true)
        case .denied:
            completion(false)
        case .undetermined:
            AVAudioSession.sharedInstance().requestRecordPermission { granted in
                DispatchQueue.main.async {
                    completion(granted)
                }
            }
        @unknown default:
            completion(false)
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å iPhone
    func initializeAudioSession() {
        do {
            let audioSession = AVAudioSession.sharedInstance()
            try audioSession.setCategory(.playAndRecord, mode: .default, options: [.defaultToSpeaker, .allowBluetooth])
            try audioSession.setActive(true)
            print("‚úÖ AppState: Audio session initialized successfully")
        } catch {
            print("‚ùå AppState: Failed to initialize audio session: \(error)")
        }
    }
    
    // –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    func resetToDefaults() {
        selectedOperations = [.addition]
        selectedDifficulty = .easy
        tasksCount = 10
        answerTimeLimit = 15.0
        selectedLanguage = "ru"
        selectedMultiplier = 2 // –ù–û–í–û–ï
        
        // –ó–≤—É–∫ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        DispatchQueue.main.async {
            AudioServicesPlaySystemSound(1110) // Begin_Record –∑–≤—É–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞
            
            let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)
            impactFeedback.impactOccurred()
        }
        
        print("üîÑ AppState: Settings reset to defaults")
    }
    
    // MARK: - –ù–û–í–´–ï –ú–ï–¢–û–î–´: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–∞–±–ª–∏—Ü—ã —É–º–Ω–æ–∂–µ–Ω–∏—è
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º
    var isRandomMultiplierMode: Bool {
        return selectedMultiplier == 0
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    func getMultiplierModeDescription() -> String {
        if isRandomMultiplierMode {
            return selectedLanguage == "ru" ? "–°–ª—É—á–∞–π–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ (1-9)" : "Random multipliers (1-9)"
        } else {
            return selectedLanguage == "ru" ? "–¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ \(selectedMultiplier)" : "Multiplication table √ó\(selectedMultiplier)"
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–ë–ï–ó –ù–£–õ–Ø)
    func getRandomMultiplier() -> Int {
        return Int.random(in: 1...9) // –ò–°–ö–õ–Æ–ß–ò–õ–ò –ù–û–õ–¨
    }
}
